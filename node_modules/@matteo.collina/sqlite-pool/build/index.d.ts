import sql, { SQLQuery, isSqlQuery } from "@databases/sql";
import connect, { DatabaseConnection as SyncDatabaseConnection } from "@databases/sqlite-sync";
import { PoolOptions } from "@databases/connection-pool";
export type { SQLQuery };
export { sql, isSqlQuery };
type connectParameters = Parameters<typeof connect>;
type DatabaseOptions = connectParameters[1];
export interface DatabaseTransaction {
    query(query: SQLQuery): Promise<any[]>;
    queryStream(query: SQLQuery): AsyncIterableIterator<any>;
}
export interface DatabaseConnection extends DatabaseTransaction {
    tx<T>(fn: (db: DatabaseTransaction) => Promise<T>): Promise<T>;
    dispose(): Promise<void>;
}
type PartialPoolOptions = Omit<PoolOptions<SyncDatabaseConnection>, "openConnection" | "closeConnection">;
type ConnectionPoolOptions = PartialPoolOptions & {
    onQuery?(onQueryParamters: any): void;
};
export declare function createConnectionPool(filename?: string, options?: DatabaseOptions, poolOptions?: ConnectionPoolOptions): DatabaseConnection;
export default createConnectionPool;
