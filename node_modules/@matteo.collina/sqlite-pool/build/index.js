"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _TransactionImplementation_onQuery, _DatabaseConnectionImplementation_pool, _DatabaseConnectionImplementation_onQuery;
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConnectionPool = exports.isSqlQuery = exports.sql = void 0;
const sql_1 = __importStar(require("@databases/sql"));
exports.sql = sql_1.default;
Object.defineProperty(exports, "isSqlQuery", { enumerable: true, get: function () { return sql_1.isSqlQuery; } });
const sqlite_sync_1 = __importDefault(require("@databases/sqlite-sync"));
const connection_pool_1 = __importDefault(require("@databases/connection-pool"));
const escape_identifier_1 = require("@databases/escape-identifier");
const events_1 = require("events");
async function* transactionalQueryStream(transaction, query) {
    const connection = transaction.connection;
    for (const row of connection.queryStream(query)) {
        if (transaction.aborted) {
            throw new Error("Transaction aborted");
        }
        yield row;
    }
}
class TransactionImplementation {
    constructor(connection, onQuery) {
        this.aborted = false;
        _TransactionImplementation_onQuery.set(this, void 0);
        this.connection = connection;
        __classPrivateFieldSet(this, _TransactionImplementation_onQuery, onQuery, "f");
    }
    async query(query) {
        if (this.aborted) {
            throw new Error("Transaction aborted");
        }
        __classPrivateFieldGet(this, _TransactionImplementation_onQuery, "f").call(this, query);
        return this.connection.query(query);
    }
    queryStream(query) {
        __classPrivateFieldGet(this, _TransactionImplementation_onQuery, "f").call(this, query);
        return transactionalQueryStream(this, query);
    }
}
_TransactionImplementation_onQuery = new WeakMap();
async function* queryStream(maybePoolConnection, query) {
    const poolConnection = await maybePoolConnection;
    try {
        for (const row of poolConnection.connection.queryStream(query)) {
            yield row;
        }
    }
    finally {
        poolConnection.release();
    }
}
class DatabaseConnectionImplementation {
    constructor(filename, options, poolOptions) {
        _DatabaseConnectionImplementation_pool.set(this, void 0);
        _DatabaseConnectionImplementation_onQuery.set(this, void 0);
        __classPrivateFieldSet(this, _DatabaseConnectionImplementation_onQuery, (query) => {
            var _a;
            const formatted = query.format({
                escapeIdentifier: escape_identifier_1.escapeSQLiteIdentifier,
                formatValue: (value) => ({ placeholder: "?", value }),
            });
            (_a = poolOptions === null || poolOptions === void 0 ? void 0 : poolOptions.onQuery) === null || _a === void 0 ? void 0 : _a.call(poolOptions, formatted);
        }, "f");
        __classPrivateFieldSet(this, _DatabaseConnectionImplementation_pool, (0, connection_pool_1.default)({
            async openConnection() {
                return (0, sqlite_sync_1.default)(filename, options);
            },
            async closeConnection(connection) {
                connection.dispose();
                return;
            },
            async onReleaseTimeout(connection) {
                const controller = connection.controller;
                if (controller) {
                    controller.abort();
                }
                connection.dispose();
                return;
            },
            ...poolOptions,
        }), "f");
    }
    async query(query) {
        const poolConnection = await __classPrivateFieldGet(this, _DatabaseConnectionImplementation_pool, "f").getConnection();
        try {
            __classPrivateFieldGet(this, _DatabaseConnectionImplementation_onQuery, "f").call(this, query);
            const res = poolConnection.connection.query(query);
            return res;
        }
        finally {
            poolConnection.release();
        }
    }
    queryStream(query) {
        __classPrivateFieldGet(this, _DatabaseConnectionImplementation_onQuery, "f").call(this, query);
        return queryStream(__classPrivateFieldGet(this, _DatabaseConnectionImplementation_pool, "f").getConnection(), query);
    }
    async tx(fn) {
        const poolConnection = await __classPrivateFieldGet(this, _DatabaseConnectionImplementation_pool, "f").getConnection();
        const connection = poolConnection.connection;
        try {
            connection.query((0, sql_1.default) `BEGIN`);
            const controller = new AbortController();
            const tx = new TransactionImplementation(connection, __classPrivateFieldGet(this, _DatabaseConnectionImplementation_onQuery, "f"));
            connection.controller = controller;
            const res = await Promise.race([
                fn(tx),
                (0, events_1.once)(controller.signal, "abort").then(() => {
                    throw new Error("Transaction aborted");
                }),
            ]);
            connection.query((0, sql_1.default) `COMMIT`);
            return res;
        }
        catch (e) {
            try {
                connection.query((0, sql_1.default) `ROLLBACK`);
            }
            catch {
                // Deliberately swallow this error
            }
            throw e;
        }
        finally {
            poolConnection.release();
        }
    }
    async dispose() {
        await __classPrivateFieldGet(this, _DatabaseConnectionImplementation_pool, "f").drain();
    }
}
_DatabaseConnectionImplementation_pool = new WeakMap(), _DatabaseConnectionImplementation_onQuery = new WeakMap();
function createConnectionPool(filename, options, poolOptions) {
    return new DatabaseConnectionImplementation(filename, options, poolOptions);
}
exports.createConnectionPool = createConnectionPool;
exports.default = createConnectionPool;
//# sourceMappingURL=index.js.map